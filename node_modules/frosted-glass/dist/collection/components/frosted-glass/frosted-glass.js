import { tempClosest } from '../../util';
export class FrostedGlass {
    constructor() {
        this.blurAmount = '1rem';
        this.blurOffsetLeft = 0;
        this.blurOffsetTop = 0;
        this.scrollOffset = 0;
        this.isFixed = false;
        this.ticking = {};
    }
    updateBackground() {
        this.requestTick('blurContentUpdate');
    }
    componentDidLoad() {
        this.el.setAttribute('uuid', `${Math.random()}`);
        this.container = tempClosest(this.el, 'frosted-glass-container');
        this.blurContainer = this.el.querySelector('.blur-container');
        this.blurContent = this.el.querySelector('.blur-content');
        this.isFixed = getComputedStyle(this.el).position === 'fixed';
        this.requestTick('blurContentUpdate');
        this.initListeners();
    }
    componentDidUnload() {
        this.removeListeners();
    }
    onScroll() {
        this.scrollOffset = window.scrollY;
    }
    onResize() {
        const rect = this.blurContainer.getBoundingClientRect();
        this.blurOffsetLeft = rect.left;
        this.blurOffsetTop = this.isFixed ? rect.top : rect.top + window.scrollY;
    }
    render() {
        return [
            h("div", { class: "blur-container" },
                h("div", { class: "blur-content", style: {
                        filter: `blur(${this.blurAmount})`,
                        left: `-${this.blurOffsetLeft}px`,
                        top: `-${this.blurOffsetTop}px`,
                        transform: `translateY(-${this.scrollOffset}px)`
                    } }),
                h("div", { style: { 'background-color': this.overlayColor }, class: "overlay" })),
            h("div", { class: `glass-content${this.isFixed ? ' fixed' : ''}` },
                h("slot", null))
        ];
    }
    cloneUsingDivs(original) {
        const clone = document.createElement('div');
        clone.innerHTML = ['frosted-glass', 'frosted-glass-container']
            .reduce((p, c) => p.split(c).join('div'), original.innerHTML);
        return clone;
    }
    initListeners() {
        this.onResize = this.onResize.bind(this);
        window.addEventListener('resize', this.onResize);
        this.onResize();
        if (!this.isFixed) {
            return;
        }
        this.onScroll = this.onScroll.bind(this);
        window.addEventListener('scroll', this.onScroll);
        this.onScroll();
    }
    removeListeners() {
        window.removeEventListener('scroll', this.onScroll);
    }
    // @ts-ignore
    blurContentUpdate() {
        const clone = this.cloneUsingDivs(this.container);
        this.removeSelected(clone, [`[uuid='${this.uuid}']`, '.blur-container']);
        this.blurContent.innerHTML = '';
        this.blurContent.innerHTML = clone.innerHTML;
        this.ticking.blurContentUpdate = false;
    }
    removeSelected(element, selectors) {
        selectors.forEach(selector => {
            const selectedElements = element.querySelectorAll(selector);
            selectedElements.forEach(selectedElement => selectedElement.remove());
        });
    }
    requestTick(functionName) {
        if (!this.ticking[functionName]) {
            requestAnimationFrame(this[functionName].bind(this));
        }
        this.ticking[functionName] = true;
    }
    static get is() { return "frosted-glass"; }
    static get properties() { return { "blurAmount": { "type": String, "attr": "blur-amount" }, "blurOffsetLeft": { "state": true }, "blurOffsetTop": { "state": true }, "el": { "elementRef": true }, "isFixed": { "state": true }, "overlayColor": { "type": String, "attr": "overlay-color" }, "scrollOffset": { "state": true }, "updateBackground": { "method": true }, "uuid": { "type": String, "attr": "uuid" } }; }
    static get style() { return "/**style-placeholder:frosted-glass:**/"; }
}
